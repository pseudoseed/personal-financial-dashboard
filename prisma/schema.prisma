// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model PlaidItem {
  id              String    @id @default(cuid())
  itemId          String    @unique // Plaid's item_id
  accessToken     String
  refreshToken    String? // For Coinbase OAuth refresh token
  provider        String    @default("plaid") // "plaid" or "coinbase"
  institutionId   String
  institutionName String?
  institutionLogo String?
  accounts        Account[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Account {
  id           String                   @id @default(cuid())
  plaidId      String                   @unique // Plaid's account_id
  name         String
  nickname     String?
  type         String
  subtype      String?
  mask         String?
  hidden       Boolean                  @default(false)
  metadata     String? // JSON string for additional data like real estate details
  url          String? // External reference URL
  invertTransactions Boolean          @default(false)
  plaidItem    PlaidItem                @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId       String
  balances     AccountBalance[]
  transactions Transaction[]
  downloadLogs TransactionDownloadLog[]
  plaidSyncCursor String? // Plaid sync cursor for incremental sync
  lastSyncTime   DateTime? // Last time transactions were synced

  // Liability specific fields
  lastStatementBalance      Float?
  minimumPaymentAmount      Float?
  nextPaymentDueDate        DateTime?
  lastPaymentDate           DateTime?
  lastPaymentAmount         Float?
  nextMonthlyPayment        Float?
  originationDate           DateTime?
  originationPrincipalAmount Float?

  createdAt    DateTime                 @default(now())
  updatedAt    DateTime                 @updatedAt
}

model AccountBalance {
  id        String   @id @default(cuid())
  account   Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId String
  current   Float
  available Float?
  limit     Float?
  date      DateTime @default(now())

  @@index([date])
}

model Transaction {
  id                      String    @id @default(cuid())
  account                 Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId               String
  plaidId                 String // Plaid's transaction_id or investment_transaction_id
  date                    DateTime
  name                    String
  amount                  Float
  category                String?
  merchantName            String?
  pending                 Boolean   @default(false)
  // Investment specific fields
  fees                    Float?
  price                   Float?
  quantity                Float?
  // Security fields
  securityId              String? // Plaid's security_id
  tickerSymbol            String? // Trading symbol
  isin                    String? // ISIN identifier
  cusip                   String? // CUSIP identifier
  sedol                   String? // SEDOL identifier
  institutionSecurityId   String? // Institution's security identifier
  securityName            String? // Descriptive name for the security
  securityType            String? // e.g., 'equity', 'mutual fund', etc.
  closePrice              Float? // Price at close of previous trading session
  closePriceAsOf          DateTime? // Date for which close_price is accurate
  isCashEquivalent        Boolean? // Whether security can be treated like cash
  type                    String? // investment transaction type: 'buy', 'sell', 'cash', etc.
  subtype                 String? // investment transaction subtype: 'buy', 'sell', 'dividend', etc.
  isoCurrencyCode         String?
  unofficialCurrencyCode  String? // For cryptocurrencies and unofficial currencies
  marketIdentifierCode    String? // e.g., 'XNAS' for NASDAQ
  sector                  String? // Industry sector
  industry                String? // Specific industry
  // Regular transaction fields
  authorizedDate          DateTime? // Date the transaction was authorized
  authorizedDatetime      DateTime? // Timestamp when transaction was authorized
  datetime                DateTime? // Timestamp when transaction was posted
  paymentChannel          String? // 'online', 'in store', etc.
  transactionCode         String? // Additional transaction metadata
  personalFinanceCategory String? // Enhanced categorization
  merchantEntityId        String? // Stable ID for the merchant
  // Location data
  locationAddress         String?
  locationCity            String?
  locationRegion          String?
  locationPostalCode      String?
  locationCountry         String?
  locationLat             Float?
  locationLon             Float?
  // Payment metadata
  byOrderOf               String?
  payee                   String?
  payer                   String?
  paymentMethod           String?
  paymentProcessor        String?
  ppd_id                  String?
  reason                  String?
  referenceNumber         String?
  categoryAi              String?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt

  @@unique([accountId, plaidId])
  @@index([date])
}

model TransactionDownloadLog {
  id              String   @id @default(cuid())
  account         Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId       String
  startDate       DateTime
  endDate         DateTime
  numTransactions Int
  status          String // 'success' or 'error'
  errorMessage    String?
  createdAt       DateTime @default(now())

  @@index([accountId, createdAt])
}
